import json
from datetime import date, timedelta
from logging import error

import requests
from aiogram.types import Message

from utils import *
from message_strings import *

async def handle_lessons(message: Message, tokens: list[str]) -> None:
    group_query = tokens[1].lower()
    if group_query == "":
        await message.answer(
            """‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É, –ø–∞—Ä—ã –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å.

            <i>–ü—Ä–∏–º–µ—Ä: –ø–∞—Ä—ã 921</i>"""
        )
        return

    try:
        group_id = [group for group in groups_csv if group[0] == group_query][0][1]
    except Exception as e:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç")
        return

    match tokens[2].lower():
        case "–∑–∞–≤—Ç—Ä–∞":
            query_date = date.today() + timedelta(days=1)
        case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" | "–ø–Ω" | "–ø–æ–Ω":
            query_date = date.today() - timedelta(days=date.today().weekday())
        case "–≤—Ç–æ—Ä–Ω–∏–∫" | "–≤—Ç" | "–≤—Ç–æ—Ä":
            query_date = date.today() - timedelta(days=date.today().weekday() - 1)
        case "—Å—Ä–µ–¥–∞" | "—Å—Ä" | "—Å—Ä–µ–¥":
            query_date = date.today() - timedelta(days=date.today().weekday() - 2)
        case "—á–µ—Ç–≤–µ—Ä–≥" | "—á—Ç" | "—á–µ—Ç":
            query_date = date.today() - timedelta(days=date.today().weekday() - 3)
        case "–ø—è—Ç–Ω–∏—Ü–∞" | "–ø—Ç" | "–ø—è—Ç":
            query_date = date.today() - timedelta(days=date.today().weekday() - 4)
        case "—Å—É–±–±–æ—Ç–∞" | "—Å–±" | "—Å—É–±":
            query_date = date.today() - timedelta(days=date.today().weekday() - 5)
        case "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" | "–≤—Å" | "–≤–æ—Å" | "–≤–æ—Å–∫":
            await message.answer("üò≥ –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–∞—Ä –Ω–µ—Ç...")
            return
        case "" | "—Å–µ–≥–æ–¥–Ω—è":
            query_date = date.today()
        case _:
            raise Exception("Unhandled 2nd token")

    payload = {
        "groupId": group_id,
        "date": str(query_date),
        "publicationId": "47eff233-d796-4b9d-8099-7abf72277af9",
    }

    response = json.loads(
        requests.post(schedule_url, json=payload, headers=req_headers).text
    )
    lessons = response.get("lessons")

    temp = []
    for lesson in lessons:
        if lesson.get("weekday") == query_date.weekday() + 1:
            temp.append(json_to_lesson(lesson))
    temp = sorted(temp, key=lambda x: x.start_time)
    lessons_today = collapse(temp)

    res = (
        "<b>"
        + response.get("group").get("name")
        + "\n"
        + str(query_date.strftime("%A, "))
        + str(len(lessons_today))
        + " "
        + lessons_declension(len(lessons_today))
        + "\n"
        + str(query_date.strftime("%d.%m.%y"))
        + "</b>\n\n"
    )
    match len(lessons_today):
        case 0:
            res += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n"
            res += "<b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä! ü•≥ü•≥ü•≥</b>\n–ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å..."
        case _:
            for index, lesson in enumerate(lessons_today):
                res += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî| " + str(lesson.index) + " —É—Ä–æ–∫" + " |‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
                res += "\n\n"
                res += "‚è≥ " + lesson.time_str + "\n"
                res += "üìñ <b>" + lesson.name + "</b>\n"
                res += "üéì " + lesson.teacher + "\n"
                res += "üîë " + lesson.cabinet + "\n\n"
    await message.answer(res)


async def handle_fio(message: Message, tokens: list[str]) -> None:
    teacher_query = tokens[1].lower().capitalize()
    if teacher_query == "":
        await message.answer(
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n<i>—Ñ–∏–æ  (—Ñ–∞–º–∏–ª–∏—è)</i>\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> —Ñ–∏–æ –î–∏–º–∏—Ç—Ä–∏–µ–≤"
        )
        return

    teachers = [
        teacher
        for teacher in teachers_csv
        if teacher[0] == teacher_query
        or teacher[1] == teacher_query
        or teacher[2] == teacher_query
    ]
    if teachers == []:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç...")
        return

    res = "üë®‚Äçüè´ –ù–∞–π–¥–µ–Ω—ã —É—á–∏—Ç–µ–ª—è:\n"
    for teacher in teachers:
        res += f"   {teacher[0]} {teacher[1]} {teacher[2]}\n"

    await message.answer(res)


async def handle_bell(message: Message, tokens: list[str]) -> None:
    type_query = tokens[1].lower()
    match type_query:
        case "":
            if datetime.today().weekday() == 5:
                is_saturday = True
            else:
                is_saturday = False
        case "—Å—É–±–±–æ—Ç–∞" | "—Å–±":
            is_saturday = True
        case "–±—É–¥–Ω–∏":
            is_saturday = False
        case _:
            await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞")
            return

    if is_saturday == False:
        await message.answer(bell_regular_str)
    else:
        await message.answer(bell_saturday_str)


### –¢–æ–∫–µ–Ω—ã
#
# 1) –≥—Ä—É–ø–ø—ã
# 2) –∫—É—Ä—Å—ã, —Å–ø–µ—Ü
# 3)
async def handle_groups(message: Message, tokens: list[str]) -> None:
    if tokens[1] == "":
        await message.answer(
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –≥—Ä—É–ø–ø—ã:\n\n<i>–≥—Ä—É–ø–ø—ã  (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã)</i>\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> –≥—Ä—É–ø–ø—ã 11-–ê"
        )


async def handle_errors(handler, message: Message, tokens: list[str]) -> None:
    try:
        await handler(message, tokens)
    except Exception as e:
        error(e)
        await message.answer(
            "üö´ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ <i>/help</i> –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )
