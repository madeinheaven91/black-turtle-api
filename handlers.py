import json
from datetime import date, timedelta
from logging import error

import requests
from aiogram.types import Message

from db import db_connect
from message_strings import *
from utils import *


# TOKENS
#
# (0) –ø–∞—Ä—ã
# (1) "", "–∑–∞–≤—Ç—Ä–∞", –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ / group_query
# (2) "", "–∑–∞–≤—Ç—Ä–∞", –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
#
async def handle_lessons(message: Message, tokens: list[str]) -> None:
    token_fst = tokens[1]
    token_snd = tokens[2]
    token_trd = tokens[3]

    if token_fst not in groups_csv:
        date_query = token_fst
        date_modifier_query = token_snd
        conn, cur = await db_connect()

        cur.execute(
            """SELECT chat.selected_group_id FROM Chat where id=%s""",
            (message.chat.id,),
        )
        group_id = cur.fetchone()[0]

        if group_id is None:
            await safe_message(
                message,
                "–Ø –Ω–µ –∑–Ω–∞—é, –≤ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø–µ! –ü—Ä–æ–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É",
            )
            return

        match date_query:
            case "–∑–∞–≤—Ç—Ä–∞":
                query_date = date.today() + timedelta(days=1)
            case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" | "–ø–Ω" | "–ø–æ–Ω":
                query_date = date.today() - timedelta(days=date.today().weekday())
            case "–≤—Ç–æ—Ä–Ω–∏–∫" | "–≤—Ç" | "–≤—Ç–æ—Ä":
                query_date = date.today() - timedelta(days=date.today().weekday() - 1)
            case "—Å—Ä–µ–¥–∞" | "—Å—Ä" | "—Å—Ä–µ–¥":
                query_date = date.today() - timedelta(days=date.today().weekday() - 2)
            case "—á–µ—Ç–≤–µ—Ä–≥" | "—á—Ç" | "—á–µ—Ç":
                query_date = date.today() - timedelta(days=date.today().weekday() - 3)
            case "–ø—è—Ç–Ω–∏—Ü–∞" | "–ø—Ç" | "–ø—è—Ç":
                query_date = date.today() - timedelta(days=date.today().weekday() - 4)
            case "—Å—É–±–±–æ—Ç–∞" | "—Å–±" | "—Å—É–±":
                query_date = date.today() - timedelta(days=date.today().weekday() - 5)
            case "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" | "–≤—Å" | "–≤–æ—Å" | "–≤–æ—Å–∫":
                await message.answer("üò≥ –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–∞—Ä –Ω–µ—Ç...")
                return
            case "" | "—Å–µ–≥–æ–¥–Ω—è":
                query_date = date.today()
            case _:
                raise Exception("Unhandled token")

        match date_modifier_query:
            case "—Å–ª–µ–¥" | "—Å–ª–µ–¥—É—é—â–∏–π" | "—Å–ª–µ–¥—É—é—â–∞—è":
                query_date += timedelta(days=7)
            case "–ø—Ä–æ—à" | "–ø—Ä" | "–ø—Ä–æ—à–ª—ã–π" | "–ø—Ä–æ—à–ª–∞—è":
                query_date -= timedelta(days=7)

        payload = {
            "groupId": group_id,
            "date": str(query_date),
            "publicationId": "47eff233-d796-4b9d-8099-7abf72277af9",
        }

        response = json.loads(
            requests.post(schedule_url, json=payload, headers=req_headers).text
        )

        msg = lessons_string(response, query_date)
        await safe_message(message, msg)
        return
    else:
        group_query = token_fst
        date_query = token_snd
        date_modifier_query = token_trd

        if group_query not in groups_csv:
            await safe_message(message, "‚ö†Ô∏è –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç")
            return
        else:
            group_id = groups_csv[group_query]

        match date_query:
            case "–∑–∞–≤—Ç—Ä–∞":
                query_date = date.today() + timedelta(days=1)
            case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" | "–ø–Ω" | "–ø–æ–Ω":
                query_date = date.today() - timedelta(days=date.today().weekday())
            case "–≤—Ç–æ—Ä–Ω–∏–∫" | "–≤—Ç" | "–≤—Ç–æ—Ä":
                query_date = date.today() - timedelta(days=date.today().weekday() - 1)
            case "—Å—Ä–µ–¥–∞" | "—Å—Ä" | "—Å—Ä–µ–¥":
                query_date = date.today() - timedelta(days=date.today().weekday() - 2)
            case "—á–µ—Ç–≤–µ—Ä–≥" | "—á—Ç" | "—á–µ—Ç":
                query_date = date.today() - timedelta(days=date.today().weekday() - 3)
            case "–ø—è—Ç–Ω–∏—Ü–∞" | "–ø—Ç" | "–ø—è—Ç":
                query_date = date.today() - timedelta(days=date.today().weekday() - 4)
            case "—Å—É–±–±–æ—Ç–∞" | "—Å–±" | "—Å—É–±":
                query_date = date.today() - timedelta(days=date.today().weekday() - 5)
            case "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" | "–≤—Å" | "–≤–æ—Å" | "–≤–æ—Å–∫":
                await message.answer("üò≥ –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–∞—Ä –Ω–µ—Ç...")
                return
            case "" | "—Å–µ–≥–æ–¥–Ω—è":
                query_date = date.today()
            case _:
                raise Exception("Unhandled 2nd token")

        match date_modifier_query:
            case "—Å–ª–µ–¥" | "—Å–ª–µ–¥—É—é—â–∏–π" | "—Å–ª–µ–¥—É—é—â–∞—è":
                query_date += timedelta(days=7)
            case "–ø—Ä–æ—à" | "–ø—Ä" | "–ø—Ä–æ—à–ª—ã–π" | "–ø—Ä–æ—à–ª–∞—è":
                query_date -= timedelta(days=7)

        payload = {
            "groupId": group_id,
            "date": str(query_date),
            "publicationId": "47eff233-d796-4b9d-8099-7abf72277af9",
        }

        response = json.loads(
            requests.post(schedule_url, json=payload, headers=req_headers).text
        )

        msg = lessons_string(response, query_date)
        await safe_message(message, msg)


async def handle_fio(message: Message, tokens: list[str]) -> None:
    teacher_query = tokens[1].capitalize()
    if teacher_query == "":
        await message.answer(
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n<i>—Ñ–∏–æ  (—Ñ–∞–º–∏–ª–∏—è)</i>\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> —Ñ–∏–æ –î–∏–º–∏—Ç—Ä–∏–µ–≤"
        )
        return

    teachers = [
        teacher
        for teacher in teachers_csv
        if teacher[0] == teacher_query
        or teacher[1] == teacher_query
        or teacher[2] == teacher_query
    ]

    if teachers == []:
        await message.answer(
            "‚ö†Ô∏è <b>–¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç...</b>\n\n<i>–ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π —É—á–∏—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–∏—à–∏—Ç–µ @madeinheaven91</i>"
        )
        return

    res = "üë®‚Äçüè´ <b>–ù–∞–π–¥–µ–Ω—ã —É—á–∏—Ç–µ–ª—è</b>:\n"
    for teacher in teachers:
        res += f"   {teacher[0]} {teacher[1]} {teacher[2]}\n"
    res += "\n<i>–ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π —É—á–∏—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–∏—à–∏—Ç–µ @madeinheaven91</i>"
    await message.answer(res)


async def handle_bell(message: Message, tokens: list[str]) -> None:
    type_query = tokens[1].lower()
    match type_query:
        case "":
            if datetime.today().weekday() == 5:
                is_saturday = True
            else:
                is_saturday = False
        case "—Å—É–±–±–æ—Ç–∞" | "—Å–±":
            is_saturday = True
        case "–±—É–¥–Ω–∏":
            is_saturday = False
        case _:
            await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞")
            return

    if is_saturday == False:
        await message.answer(bell_regular_str)
    else:
        await message.answer(bell_saturday_str)


### –¢–æ–∫–µ–Ω—ã
#
# 1) –≥—Ä—É–ø–ø—ã
# 2) –∫—É—Ä—Å—ã, —Å–ø–µ—Ü
# 3)
async def handle_groups(message: Message, tokens: list[str]) -> None:
    if tokens[1] == "":
        await message.answer(
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –≥—Ä—É–ø–ø—ã:\n\n<i>–≥—Ä—É–ø–ø—ã  (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã)</i>\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> –≥—Ä—É–ø–ø—ã 11-–ê"
        )


async def handle_errors(handler, message: Message, tokens: list[str]) -> None:
    try:
        await handler(message, tokens)
    except Exception as e:
        error(e)
        await message.answer(
            "üö´ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ <i>/help</i> –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )
