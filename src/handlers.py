import json
from logging import error

import requests
from aiogram.types import Message

from data import groups_csv
from src.db import db_commit_close, db_connect
from src.exceptions import (
    BellTypeError,
    DayError,
    GroupNotSelectedError,
    UnknownTeacherError,
    WeekError,
)
from src.message_strings import *
from src.tokens.day import process_date_token
from src.tokens.group import process_group_token
from src.tokens.teacher import process_teacher_token
from src.tokens.week import process_week_token
from src.utils import *

# TOKENS
#
# (0) –ø–∞—Ä—ã
# (1) –≥—Ä—É–ø–ø–∞ / –¥–µ–Ω—å
# (2) –¥–µ–Ω—å / –Ω–µ–¥–µ–ª—è
# (3) –Ω–µ–¥–µ–ª—è / ""


#
async def handle_lessons(message: Message, tokens: list[str]) -> None:
    # Token identification
    if tokens[1] not in groups_csv:
        day_token = tokens[1]
        week_token = tokens[2]
    else:
        group_token = tokens[1]
        day_token = tokens[2]
        week_token = tokens[3]

    if tokens[1] != day_token:  ### If the first token is group number
        group_id = await process_group_token(group_token)
        day_processed = process_date_token(day_token)
        query_date = process_week_token(
            week_token, day_processed[0], day_processed[1]
        )


        payload = {
            "groupId": group_id,
            "date": str(query_date),
            "publicationId": "47eff233-d796-4b9d-8099-7abf72277af9",
        }

        response = json.loads(
            requests.post(schedule_url, json=payload, headers=req_headers).text
        )

        msg = lessons_string(response, query_date)
        await safe_message(message, msg)
    else:  ### If the first token is not group number
        try:
            day_processed = process_date_token(day_token)
            query_date = process_week_token(
                week_token, day_processed[0], day_processed[1]
            )
        except:
            raise UnknownGroupError("Unknown group (" + day_token + ")")

        conn, cur = await db_connect()
        cur.execute(
            """SELECT chat.selected_group_id FROM Chat where id=%s""",
            (message.chat.id,),
        )

        fetch = cur.fetchone()
        if fetch is None:
            raise GroupNotSelectedError(
                "Group not selected in chat (" + message.chat.id + ")"
            )
        group_id = fetch[0]
        await db_commit_close(conn, cur)

        payload = {
            "groupId": group_id,
            "date": str(query_date),
            "publicationId": "47eff233-d796-4b9d-8099-7abf72277af9",
        }

        response = json.loads(
            requests.post(schedule_url, json=payload, headers=req_headers).text
        )

        msg = lessons_string(response, query_date)
        await safe_message(message, msg)
        return


# –¢o–∫–µ–Ω—ã
# (0) —Ñ–∏–æ
# (1) —Ñ–∞–º–∏–ª–∏—è / –∏–º—è / –æ—Ç—á–µ—Å—Ç–≤–æ
async def handle_fio(message: Message, tokens: list[str]) -> None:
    teacher_token = tokens[1].capitalize()

    if teacher_token == "":
        await safe_message(message, teacher_help)
        return

    teachers = process_teacher_token(teacher_token)

    res = "üë®‚Äçüè´ <b>–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</b>:\n"
    for teacher in teachers:
        res += f" - {teacher[0]} {teacher[1]} {teacher[2]}\n"
    res += "\n<i>–ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –ø–∏—à–∏—Ç–µ @madeinheaven91</i>"
    await safe_message(message, res)


# –¢–æ–∫–µ–Ω—ã
#
# (0) –∑–≤–æ–Ω–∫–∏
# (1) —Ç–æ–∫–µ–Ω —Ç–∏–ø–∞ / ""


async def handle_bell(message: Message, tokens: list[str]) -> None:
    type_token = tokens[1]
    match type_token:
        case "":
            if datetime.today().weekday() == 5:
                is_saturday = True
            else:
                is_saturday = False
        case "—Å—É–±–±–æ—Ç–∞" | "—Å–±":
            is_saturday = True
        case "–±—É–¥–Ω–∏":
            is_saturday = False
        case _:
            raise BellTypeError("Unknown bell type")

    if is_saturday == False:
        await safe_message(message, bell_regular_msg)
    else:
        await safe_message(message, bell_saturday_msg)


### –¢–æ–∫–µ–Ω—ã
#
# 1) –≥—Ä—É–ø–ø—ã
# 2) –∫—É—Ä—Å—ã, —Å–ø–µ—Ü
# 3)
async def handle_groups(message: Message, tokens: list[str]) -> None:
    if tokens[1] == "":
        await message.answer(
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –≥—Ä—É–ø–ø—ã:\n\n<i>–≥—Ä—É–ø–ø—ã  (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã)</i>\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> –≥—Ä—É–ø–ø—ã 11-–ê"
        )


async def handle_exception(handler, message: Message, tokens: list[str]) -> None:
    try:
        await handler(message, tokens)
    except Exception as e:
        add_prefix = True
        match e:
            case s if isinstance(e, UnknownGroupError):
                msg = "<b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞</b>"
            case s if isinstance(e, DayError):
                msg = "<b>–ù–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>"
            case s if isinstance(e, WeekError):
                msg = "<b>–ù–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>"
            case s if isinstance(e, UnknownTeacherError):
                msg = "<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...</b>\n\n<i>–ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –ø–∏—à–∏—Ç–µ @madeinheaven91</i>"
            case s if isinstance(e, BellTypeError):
                msg = "<b>–ù–µ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫–∏–µ –∑–≤–æ–Ω–∫–∏ –≤–∞–º –Ω—É–∂–Ω—ã.</b>"
            case s if isinstance(e, GroupNotSelectedError):
                msg = "–Ø –Ω–µ –∑–Ω–∞—é, –≤ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø–µ! –ü—Ä–æ–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É"
            case _:
                msg = exception_msg
                add_prefix = False
        error(e)
        if add_prefix != False:
            msg = "‚ö†Ô∏è " + msg
        await safe_message(message, msg)
